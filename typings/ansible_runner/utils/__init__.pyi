"""
This type stub file was generated by pyright.
"""

import atexit
import base64
import codecs
import fcntl
import hashlib
import json
import os
import pipes
import pwd
import re
import shutil
import signal
import stat
import subprocess
import sys
import tempfile
import threading
import uuid
from io import StringIO
from pathlib import Path

from ansible_runner.exceptions import ConfigurationError
from six import binary_type, PY2, PY3, string_types, text_type

def cleanup_folder(folder):  # -> bool:
    """Deletes folder, returns True or False based on whether a change happened."""
    ...

def register_for_cleanup(folder):  # -> None:
    """
    Provide the path to a folder to make sure it is deleted when execution finishes.
    The folder need not exist at the time when this is called.
    """
    ...

def get_plugin_dir(): ...
def get_callback_dir(): ...
def is_dir_owner(directory):  # -> bool:
    """Returns True if current user is the owner of directory"""
    ...

class Bunch:
    """
    Collect a bunch of variables together in an object.
    This is a slight modification of Alex Martelli's and Doug Hudgeon's Bunch pattern.
    """

    def __init__(self, **kwargs) -> None: ...
    def update(self, **kwargs): ...
    def get(self, key): ...

def isplaybook(obj):  # -> bool:
    """
    Inspects the object and returns if it is a playbook

    Args:
        obj (object): The object to be inspected by this function

    Returns:
        boolean: True if the object is a list and False if it is not
    """
    ...

def isinventory(obj):  # -> bool:
    """
    Inspects the object and returns if it is an inventory

    Args:
        obj (object): The object to be inspected by this function

    Returns:
        boolean: True if the object is an inventory dict and False if it is not
    """
    ...

def check_isolation_executable_installed(isolation_executable):  # -> bool:
    """
    Check that process isolation executable (e.g. podman, docker, bwrap) is installed.
    """
    ...

def dump_artifact(obj, path, filename=...):  # -> str | LiteralString:
    """
    Write the artifact to disk at the specified path

    Args:
        obj (string): The string object to be dumped to disk in the specified
            path.  The artifact filename will be automatically created

        path (string): The full path to the artifacts data directory.

        filename (string, optional): The name of file to write the artifact to.
            If the filename is not provided, then one will be generated.

    Returns:
        string: The full path filename for the artifact that was generated
    """
    ...

def cleanup_artifact_dir(path, num_keep=...): ...
def dump_artifacts(kwargs):  # -> None:
    """
    Introspect the kwargs and dump objects to disk
    """
    ...

def collect_new_events(
    event_path, old_events
):  # -> Generator[tuple[Any, Unknown], None, None]:
    """
    Collect new events for the 'events' generator property
    """
    ...

class OutputEventFilter:
    """
    File-like object that looks for encoded job events in stdout data.
    """

    EVENT_DATA_RE = ...
    def __init__(
        self, handle, event_callback, suppress_ansible_output=..., output_json=...
    ) -> None: ...
    def flush(self): ...
    def write(self, data): ...
    def close(self): ...

def open_fifo_write(path, data):  # -> None:
    """open_fifo_write opens the fifo named pipe in a new thread.
    This blocks the thread until an external process (such as ssh-agent)
    reads data from the pipe.
    """
    ...

def args2cmdline(*args): ...
def ensure_str(s, encoding=..., errors=...):  # -> bytes | str:
    """
    Copied from six==1.12

    Coerce *s* to ``str``.

    For Python 2:

      - ``unicode`` -> encoded to ``str``
      - ``str`` -> ``str``

    For Python 3:

      - ``str`` -> ``str``
      - ``bytes`` -> decoded to ``str``
    """
    ...

def sanitize_container_name(original_name):  # -> str:
    """
    Docker and podman will only accept certain characters in container names
    This takes a given name from user-specified values and replaces the
    invalid characters so it can be used in docker/podman CLI commands

    :param str original_name: Container name containing potentially invalid characters
    """
    ...

def cli_mounts(): ...
def sanitize_json_response(data):  # -> str:
    """
    Removes warning message from response message emitted by Ansible
    command line utilities.

    :param str data: The string data to be sanitized
    """
    ...

def get_executable_path(name): ...
def signal_handler(): ...
