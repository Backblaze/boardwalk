"""
This type stub file was generated by pyright and then manually improved
"""
from typing import Any, Iterable, TypedDict

logger = ...

class RunnerEvent(TypedDict):
    event_data: EventData
    event: str
    stdout: str

class EventData(TypedDict):
    host: str
    ignore_errors: bool
    res: EventDataResult
    task_action: str
    task: str

class EventDataResult(TypedDict):
    _ansible_no_log: bool
    ansible_facts: dict[str, Any]
    content: str
    msg: str
    stat: EventDataStat

class EventDataStat(TypedDict):
    exists: bool

class Runner:
    def __init__(
        self,
        config,
        cancel_callback=...,
        remove_partials=...,
        event_handler=...,
        artifacts_handler=...,
        finished_callback=...,
        status_handler=...,
    ) -> None:
        self.rc: int | None = None
    def event_callback(self, event_data):
        """
        Invoked for every Ansible event to collect stdout with the event data and store it for
        later use
        """
        ...
    def status_callback(self, status): ...
    def run(self):  # -> tuple[str | Unknown, int | Unknown]:
        """
        Launch the Ansible task configured in self.config (A RunnerConfig object), returns once the
        invocation is complete
        """
        ...
    @property
    def stdout(self):  # -> TextIOWrapper:
        """
        Returns an open file handle to the stdout representing the Ansible run
        """
        ...
    @property
    def stderr(self):  # -> TextIOWrapper:
        """
        Returns an open file handle to the stderr representing the Ansible run
        """
        ...
    @property
    def events(self) -> Iterable[RunnerEvent]:
        """
        A generator that will return all ansible job events in the order that they were emitted from Ansible

        :Example:

        .. code-block::

            {
               "event": "runner_on_ok",
               "uuid": "00a50d9c-161a-4b74-b978-9f60becaf209",
               "stdout": "ok: [localhost] => {\\r\\n    \\"   msg\\":\\"Test!\\"\\r\\n}",
               "counter": 6,
               "pid": 740,
               "created": "2018-04-05T18:24:36.096725",
               "end_line": 10,
               "start_line": 7,
               "event_data": {
                  "play_pattern": "all",
                  "play": "all",
                  "task": "debug",
                  "task_args": "msg=Test!",
                  "remote_addr": "localhost",
                  "res": {
                     "msg": "Test!",
                     "changed": false,
                     "_ansible_verbose_always": true,
                     "_ansible_no_log": false
                  },
                  "pid": 740,
                  "play_uuid": "0242ac11-0002-443b-cdb1-000000000006",
                  "task_uuid": "0242ac11-0002-443b-cdb1-000000000008",
                  "event_loop": null,
                  "playbook_uuid": "634edeee-3228-4c17-a1b4-f010fdd42eb2",
                  "playbook": "test.yml",
                  "task_action": "debug",
                  "host": "localhost",
                  "task_path": "/tmp/demo/project/test.yml:3"
               }
           }
        """
        ...
    @property
    def stats(self):  # -> dict[str, Any] | None:
        """
        Returns the final high level stats from the Ansible run

        Example:
            {'dark': {}, 'failures': {}, 'skipped': {}, 'ok': {u'localhost': 2}, 'processed': {u'localhost': 1}}
        """
        ...
    def host_events(self, host):  # -> filter[Any]:
        """
        Given a host name, this will return all task events executed on that host
        """
        ...
    def kill_container(self):  # -> None:
        """
        Internal method to terminate a container being used for job isolation
        """
        ...
    @classmethod
    def handle_termination(cls, pid, pidfile=..., is_cancel=...):  # -> None:
        """
        Internal method to terminate a subprocess spawned by ``pexpect`` representing an invocation of runner.

        :param pid:       the process id of the running the job.
        :param pidfile:   the daemon's PID file
        :param is_cancel: flag showing whether this termination is caused by
                          instance's cancel_flag.
        """
        ...
    def get_fact_cache(self, host):  # -> Any | dict[Unknown, Unknown]:
        """
        Get the entire fact cache only if the fact_cache_type is 'jsonfile'
        """
        ...
    def set_fact_cache(self, host, data):  # -> int:
        """
        Set the entire fact cache data only if the fact_cache_type is 'jsonfile'
        """
        ...
