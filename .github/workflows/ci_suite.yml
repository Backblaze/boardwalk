---
name: CI Suite

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read

jobs:
  workflow_entrypoint:
    name: Entrypoint
    runs-on: ubuntu-latest
    steps:
      - name: Intentionally Empty Step
        run: exit 0

  run_linters:
    name: Run linters
    needs: workflow_entrypoint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Proceed to run linters
        id: linter-setup
        run: ':'

      - name: Run ansible-lint
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        uses: ansible/ansible-lint@v24.12.0
        with:
          args: "--config-file ${{ github.workspace }}/test/ansible-lint.yaml"
          working_directory: ${{ github.workspace }}/test

      - name: Ruff - Linting
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        uses: astral-sh/ruff-action@v1

      - name: Ruff - Formatting
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        uses: astral-sh/ruff-action@v1
        with:
          args: "format --check"

  run_all_tests:
    name: Boardwalk Test Suite
    needs: workflow_entrypoint
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.11'

      - name: If Poetry cache exists, restore the cache to cut down on CI build time
        id: cached-poetry
        uses: actions/cache@v4.2.0
        with:
          path: ~/.local  # the path depends on the OS
          key: poetry-0  # increment to reset cache
      
      - name: If we don't have a cached Poetry installation, install it
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: If a cached virtual environment exists, load it
        id: cached-poetry-dependencies
        uses: actions/cache@v4.2.0
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies if they were not cached
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install the main project
        run: poetry install --no-interaction
      
      # If we need to add this for the replacement typechecker, uncomment this.
      # - run: poetry add ansible --no-interaction

      - name: Execute Python test suite
        run: make test-pytest

      # Commented out because we're planning on switching to a different static
      # typechecker, and frankly whatever is taking pyright _minutes_ to run is
      # a little excessive, for now.
      # - run: make test-pyright
